{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#hello","title":"Hello","text":"<p>This will be a resource for any one that is in LHS's CSA program. I will try to cover the Second Semester only as this was an idea that I though of in the first semester. </p> <p>Raw MD files</p> Difficulties <p>These are assigned to each lab and is rated on how difficult it would be for an intermediate programer</p> <p>simple - Not too bad</p> <p>Complicated - A bit hard, but other wise not that bad</p> <p>Complex - Was confusing/Instructions was unclear</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>These docs will not provide the full code/solution of the labs but rather to help aid you with the labs. Also don't expect all labs to be documented here </p>"},{"location":"1Tips/","title":"Some tips that may be helpful","text":""},{"location":"1Tips/#web-cat-style-checker-if-enabled","title":"Web-CAT Style Checker (if enabled)","text":"<p>webcat's style checking can be annoying so here are some tips on what you can do </p> <p>What you can do first is click on the <code>Full Printable Report</code> Button</p> <p></p> <p>What it does is bring you to a page which shows you all the parts where your style is wrong</p> <p></p> <p>This will allow you to see why exactly you are not getting your style points</p> <p>Here is some style that webcat likes/dislikes</p>"},{"location":"1Tips/#closing-brackets","title":"Closing brackets","text":"Wrong <p><pre><code>if (condition){\n\n}\n\nif (condition) // webcat doesn't like this syntax\n    return;\n\nclass myClass\n    {\n\n}\n</code></pre> Make sure that you have your starting { be below the Statements and Indented properly </p> Correct <pre><code>if (condition)\n{\n\n}\n\nif (condition)\n{\n    return;\n}\n\nclass myClass\n{\n\n}\n</code></pre>"},{"location":"1Tips/#spaces-between-operators-and-single-lines","title":"Spaces between operators and Single lines","text":"Wrong <pre><code>int sum=x+x;\n\nprivate Stack&lt;Integer&gt; backStk,forwardStk;\n\nSystem.out.println(\"Hello\");System.out.println(\"World\");\n</code></pre> Correct <pre><code>int sum = x + x;\n\nprivate Stack&lt;Integer&gt; backStk;\nprivate Stack&lt;Integer&gt; forwardStk;\n\nSystem.out.println(\"Hello\");\nSystem.out.println(\"World\");\n</code></pre>"},{"location":"1Tips/#lines-longer-then-70-characters","title":"Lines longer then 70 characters","text":"Wrong <pre><code>// This is a line that will be more then 70 characters and will cause webcat to mark points off\n</code></pre> Correct <pre><code>// This is how you can avoid it\n// By using multiple lines\n// this can apply to java doc and code\n</code></pre>"},{"location":"1Tips/#improper-indenting","title":"Improper Indenting","text":"Wrong <pre><code>if (condition)  \n    {\nSystem.out.println(\"Hello World\")\n    }\n</code></pre> Correct <p><pre><code>if (condition)  \n{\n    System.out.println(\"Hello World\")\n}\n</code></pre> you can use an auto formatter to format your code as well</p>"},{"location":"1Tips/#improper-java-docs-or-missing","title":"Improper Java Docs or missing","text":"Wrong <pre><code>/**\n*  //description is missing \n*  @author  //author is not filled out\n*  @version //version is not filled out ...\n*  @author  \n*  @author  \n*\n*  @author  \n*/\npublic class Integer\n{ \n    private int x;\n\n    //missing java docs\n    public Integer(int x)\n    {\n        this.x = x;\n    }\n\n    /**\n     * getX is missing a description @return\n     * @return\n     */\n    public int getX()\n    {\n        return x\n    }\n\n    /**\n     * setX is missing @param\n     */\n    public void setX(int x)\n    {\n        this.x = x;\n    }\n\n}\n</code></pre> Correct <p><pre><code>/**\n*  A Integer wrapper class that encapsulates an int value\n*  @author  you\n*  @version Jan 1,1970\n*  @author  Period 1\n*  @author  Assignment: JMCH0\n*\n*  @author  Sources: none\n*/\npublic class Integer\n{ \n    private int x;\n\n\n    /**\n    * Constructs an Integer object and initializes its value.\n    * @param x The integer value to be stored\n    */\n    public IntegerWrapper(int x) {\n        this.x = x;\n    }\n\n    /**\n    * Retrieves the stored integer value.\n    * @return The stored integer value\n    */\n    public int getValue() {\n        return x;\n    }\n\n    /**\n    * Updates the stored integer value.\n    * @param x The new integer value to be stored\n    */\n    public void setValue(int x) {\n        this.x = x;\n    }\n\n}\n</code></pre> Remember to make sure that your java docs don't pass 70 characters and if it does you can move some to the next line</p> <p>There is more checks that webcat does but these are the most basic ones</p>"},{"location":"1Tips/#keybinds","title":"Keybinds","text":""},{"location":"1Tips/#java-version-is-different","title":"Java Version is different","text":"<p>If your java workspace is different then your Java version and it causes an error here is what you can do.</p> <ol> <li>Go to EXPLORER (should be the first icon)</li> <li>Go down to JAVA PROJECTS</li> <li>Click on the 3 horizontal dots </li> <li>Press Clean Workspace</li> </ol> <p></p>"},{"location":"1Tips/#autofill","title":"AutoFill","text":"<p>There are a few statements that java will auto fill for you for example typing just sys will show you options such as <code>sysout</code>,<code>syserr</code>, etc... Pressing on those are way faster then just typing <code>System.out.println()</code></p>"},{"location":"20%20Exercise/","title":"20.0 Exercises: 1-10,13,14","text":"<p>Difficulty: unknown </p>"},{"location":"20%20Exercise/#instructions","title":"Instructions","text":"<ol> <li> <p>Fill in the blanks in the initialization of <code>node3</code>, <code>node2</code>, <code>node1</code> and <code>head</code>, so that <code>node1</code>, <code>node2</code>, and <code>node3</code> form a linked list (in that order) referred to by <code>head</code>. <pre><code>ListNode node3 = new ListNode(\"Node 3\",________ );\nListNode node2 = new ListNode(\"Node 2\",________ );\nListNode node1 = new ListNode(\"Node 1\",________ );\nListNode head = ________ ;\n</code></pre></p> </li> <li> <p>Fill in the blanks in the following method: <pre><code>// Returns true if the list referred to by head\n// has at least two nodes; otherwise returns false\npublic boolean hasTwo(ListNode head)\n{\nreturn _______________________________________ ;\n}\n</code></pre></p> </li> <li> <p>Write a method <pre><code>public ListNode removeFirst(ListNode head)\n</code></pre> that unlinks the first node from the list and returns the head of the new list. Your method should throw a <code>NoSuchElementException</code> when the original list is empty</p> </li> <li> <p>Write a method <pre><code>public int size(ListNode head)\n</code></pre> that returns the number of nodes in the list referred to by head: <pre><code>(a) using a for loop.\n(b) using recursion. \n</code></pre></p> </li> <li> <p><code>head</code> is the fist node of a non-empty linked list (without a tail). Write a method <pre><code>public void add(ListNode head, Object value)\n</code></pre> that appends a new node holding value at the end of the list.</p> </li> <li> <p>Fill in the blanks in the method below. This method takes the list referred to by head, builds a new list in which the nodes have the same information but are arranged in reverse order, and returns the head of the new list. The original list remains unchanged. Your solution must use a <code>for</code> loop (not recursion). <pre><code>public ListNode reverseList(ListNode head){\n    ListNode node, newNode, newHead = null;\n    for ( _____________________________________________ )\n    {\n    ______________________________________________\n    ...\n    }\n    return newHead;\n}\n</code></pre></p> </li> <li> <p>Write a method <pre><code>public ListNode concatenateStrings(ListNode head)\n</code></pre> that takes the list referred to by <code>head</code>, builds a new list, and returns its head. The original list contains strings. The k-th node in the new list should contain the concatenation of all the strings from the original list from the first node up to and including the k-th node. For example, if the original list contains strings <code>\"A\"</code>, <code>\"B\"</code>, <code>\"C\"</code>, the new list should contain strings <code>\"A\"</code>, <code>\"AB\"</code>, <code>\"ABC\"</code>.</p> </li> <li> <p>Write a method <pre><code>public ListNode rotate(ListNode head)\n</code></pre> that takes a linked list referred to by <code>head</code>, splits off the first node, and appends it at the end of the list. The method should accomplish this solely by rearranging links: do not allocate new nodes or move objects between nodes. The method should return the head of the rotated list.</p> </li> <li> <p>A list referred to by <code>head</code> contains strings arranged alphabetically in ascending order. Write a method <pre><code>public ListNode insertInOrder(ListNode head, String s)\n</code></pre> that inserts s into the list, preserving the order. If <code>s</code> is already in the list, it is not inserted. The method should return the head of the updated list.</p> </li> <li> <p>Write a method <pre><code>public ListNode middleNode(ListNode head)\n</code></pre> that returns the middle node (or one of the two middle nodes) of a linked list. Design this method using no recursion and only one loop.</p> </li> <li> <p>(Optional) Let us say that a string matches an input pattern (another string) if the pattern is at least as long as the string and for every non-wildcard character in the pattern the string has the same character in the same position. (The wildcard character is <code>'?'</code>.) For example, both <code>\"New York\"</code> and <code>\"New Jersey\"</code> match the input pattern <code>\"New ???????\"</code>. Write a method <pre><code>public ListNode moveToBack(ListNode head, String pattern)\n</code></pre> that takes a list of strings referred to by <code>head</code> and moves all the strings that match <code>pattern</code> to the end of the list, preserving their order. Your method must work by rearranging links; do not allocate new nodes or use temporary arrays or lists. The method should return the head of the updated list.</p> </li> <li> <p>Write a method <pre><code>public void concat(LinkedListWithTail list1,LinkedListWithTail list2)\n</code></pre> that concatenates <code>list2</code> to <code>list1</code> in O(1) time. </p> </li> <li> <p>Implement Selection Sort for a linked list with a tail. (Assume that the list holds <code>Comparable</code> objects.) You method should run in O(n<sup>2</sup>) time, where <code>n</code> is the number of nodes in the list.</p> </li> <li> <p>Write the following method: <pre><code>// Removes the largest element from the list and returns\n// the head of the modified list.\n// Precondition: head refers to the first node of a\n// non-empty doubly-linked list with\n// Integer values.\npublic ListNode2 removeMax(ListNode2 head)\n</code></pre></p> </li> <li>(Optional) Write a method  <pre><code>public void quickSort(ListNode2 fromNode, ListNode2 toNode)\n</code></pre> that implements the Quicksort algorithm for a given segment of a doublylinked list. <code>fromNode</code> refers to the first node of the segment, and <code>toNode</code> refers to the last node of the segment. (Assume that the list holds <code>Comparable</code> objects.) The links outside the segment should remain unchanged, and the segment should remain linked at the same place within the list. The method should run in O(n log n) time, where n is the number of nodes in the segment. Do not use any temporary arrays or lists.</li> </ol>"},{"location":"20.7%20Teletext/","title":"20.7 Lab: Teletext","text":"<p>Difficulty: Complicated (30 Minutes)</p>"},{"location":"20.7%20Teletext/#instructions","title":"Instructions","text":"<p>Figure 20-12 shows a snapshot from the Teletext program. The program continuously scrolls up a list of headlines. The user can add a headline, by typing it in the provided text input field. The line will be added after the blank line that follows \u201cToday\u2019s headlines.\u201d The user can also delete a headline by entering \u201cd.\u201d The next headline after the top one will be deleted. Run <code>Teletext</code> by clicking on the <code>Teletext.jar</code> file in <code>JM\\Ch20\\Teletext</code>. </p> <p></p> <p>Figure 20-13 shows the class diagram for the Teletext program. The program keeps the headlines in a doubly-linked circular list. (Circular lists are not used very often; this is a rare occasion where we can benefit from one.) The list is implemented in the <code>TeletextList</code> class. Your task is to fill in the missing code in that class. <code>TeletextList.java</code> is located in <code>JM\\Ch20\\Teletext</code>. </p> <p></p>"},{"location":"20.7%20Teletext/#overview","title":"Overview","text":"<p>This lab isn't too hard as its just a simple Circular Doubly Linked List but the wording can be a bit hard to understand at first.</p>"},{"location":"20.7%20Teletext/#teletextlist","title":"TeletextList","text":"<p>This is the file which you will be modifying your code in.</p>"},{"location":"20.7%20Teletext/#-fields-","title":"---Fields---","text":""},{"location":"20.7%20Teletext/#heading-listnode2string","title":"heading <code>ListNode2&lt;String&gt;</code>","text":"<p>This will store the ListNode2 that has the value \"Today's headlines\"</p>"},{"location":"20.7%20Teletext/#topnode-listnode2string","title":"topNode <code>ListNode2&lt;String&gt;</code>","text":"<p>This will hold the current ListNode2 that is being displayed </p>"},{"location":"20.7%20Teletext/#-methodsfunctions-","title":"---Methods/Functions---","text":""},{"location":"20.7%20Teletext/#teletextliststring-headlines-constructor","title":"TeletextList(<code>String[] headlines</code>) : <code>constructor</code>","text":"<p>This constructor will init the LinkList, First create a <code>ListNode2</code> and store the value <code>\"Today's headlines\"</code>. Then store the reference in the <code>heading</code> field.  Create two <code>ListNode2</code> and store the value <code>\"\"</code> in them. Then set the prev of <code>heading</code> to one of the Nodes and the next of <code>heading</code> to another.  This will create this section of the blog</p> <p></p> <p>After doing that iterate through <code>headlines</code> which is an string array and insert each string into the Circular Doubly Linked List, </p> <p>Reminder</p> <p>make sure you remember to set the next and prev for both Empty ListNode2 and for each of the headlines in the string array so it creates an Circular Doubly Linked List</p> <p>Lastly set <code>topNode</code> to <code>heading</code></p>"},{"location":"20.7%20Teletext/#insertstring-msg-void","title":"insert(<code>String msg</code>) : <code>void</code>","text":"<p>This method inserts a new <code>ListNode2</code> with the msg after the <code>\"\" ListNode2</code> of the <code>heading ListNode2</code></p> <p>You would start by first finding the <code>\"\" ListNode2</code> by starting with <code>heading</code> and use <code>.getNext()</code> to get the <code>\"\" ListNode2</code> Once you have that <code>ListNode2</code> you would create a new <code>ListNode2</code> with the value of msg and set the prev to the <code>\"\" ListNode2</code> and set next to the next <code>ListNode2</code> of the <code>\"\" ListNode2</code>. After you do that you want to update the next value for <code>\"\" ListNode2</code> and the prev value for <code>(\"\" ListNode2).getNext()</code></p>"},{"location":"20.7%20Teletext/#delete-void","title":"delete() : <code>void</code>","text":"<p>deletes the next Node after <code>topNode</code> unless the next Node is the <code>heading</code> or one of the <code>\"\" ListNode2</code> </p> <p>Get the nextNode after topNode and do an if check to see if its either the <code>ListNode2</code> before/after <code>heading</code> or if is <code>heading</code>. If any of these conditions pass then don't delete the nextNode and do nothing. If it does pass then remove the <code>ListNode2</code> by settings the prevNode's next to nextNode and nextNode's prev to prevNode</p>"},{"location":"20.7%20Teletext/#scrollup-void","title":"scrollUp() : <code>void</code>","text":"<p>sets topNode to the nextNode</p>"},{"location":"20.7%20Teletext/#addbeforelistnode2-node-string-msg-listnode2string","title":"addBefore(ListNode2 node, String msg ) : <code>ListNode2&lt;String&gt;</code> <p>this method is already done for you </p>","text":""},{"location":"20.7%20Teletext/#addafterlistnode2-node-string-msg-listnode2string","title":"addAfter(ListNode2 node, String msg ) : <code>ListNode2&lt;String&gt;</code> <p>similar to addBefore but instead of before you do after</p> <p>Look at addBefore's code</p>","text":""},{"location":"20.7%20Teletext/#removelistnode2-node-string-msg-void","title":"remove(ListNode2 node, String msg) : <code>void</code> <p>similar to delete but delete the given node instead</p> <p>explained in delete</p>","text":""},{"location":"21%20Browsing/","title":"21.0 Lab: Browsing","text":"<p>Difficulty: simple (15 Minutes)</p> <p>Warning</p> <p>This lab deducts points based on a formatting criteria. Ensure that your code includes JavaDoc comments and adheres to the formatting guidelines specified by Web-CAT. For detailed instructions on proper styling, refer to  this resource.</p> <p>Warning</p> <p>Remember to read the instructions in <code>BrowserView.java</code>  when submitting to Web-CAT as not doing so would result in an error.</p>"},{"location":"21%20Browsing/#instructions","title":"Instructions","text":"<p>In this lab we will implement a toy browser called <code>LineCruiser</code>. Rather than browsing web pages, our browser will \u201cbrowse\u201d several lines of text in the same file. Figure 21-5 shows the classes that we have to write for this project. As usual, this is a team effort: I\u2019ll provide the <code>LineCruiser</code>, <code>BrowserMouseListener</code>, <code>BrowserControlPanel</code>, and BrowserView classes, and you work on the <code>BrowserModel</code> class.</p> <p>Warning</p> <p>parts of the original Instructions were truncated, Make sure to check the original pdf for the full instructions (If you want)</p> <p>Our browser has \u201cHome,\u201d \u201cBack,\u201d and \u201cForward\u201d buttons, just like a real browser. An important part of your task is to figure out how exactly these buttons work in a real browser (such as Firefox or Internet Explorer). \u201cHome,\u201d \u201cBack,\u201d and \u201cForward\u201d in our browser should work the same way</p> <p>Now let\u2019s agree on more formal specifications.</p> <p>My BrowserView class provides one method of interest to you: <pre><code>public void update(int n)\n</code></pre> It displays several lines from the file, as many as fit in the display, with the n-th line at the top of the display. Your class, BrowserModel, should call update as necessary.</p> <p>Your BrowserModel class should provide one constructor and six methods.</p> <p>BrowserModel\u2019s constructor takes one parameter:</p> <pre><code>BrowserModel(BrowserView view)\n</code></pre> <p>Your constructor should save view to be able to call view\u2019s update method later. Don\u2019t forget to call update from BrowserModel\u2019s constructor to initialize view. Four of BrowserModel\u2019s methods are used for navigation:</p> <pre><code>void back();\nvoid forward();\nvoid home();\nvoid followLink(int n);\n</code></pre> <p>I call home, back, and forward methods when a corresponding button is clicked. I call followLink(n) when a hyperlink pointing to the n-th line is clicked.</p> <p>BrowserModel\u2019s two remaining methods let me know whether the \u201cBack\u201d and/or \u201cForward\u201d buttons should be enabled or disabled: </p> <pre><code>boolean hasBack();\nboolean hasForward();\n</code></pre> <p>The return <code>true</code> means enable; <code>false</code>, disable.</p> <p>You\u2019ll find the LineCruiser files in <code>JM\\Ch21\\Browser</code>. The <code>lines.html data</code> file for testing our browser is in the same folder. Use <code>java.util.Stack&lt;Integer&gt;</code> for the stacks. Write the BrowserModel class and test the program thoroughly. </p>"},{"location":"21%20Browsing/#overview","title":"Overview","text":"<p>This lab introduces you to Stacks which is a data structure that is LIFO (Last In First Out) </p> <p></p> <p>This can be useful here as we just need the last Item added to the stack to keep track of the pages you went to before</p>"},{"location":"21%20Browsing/#browsermodel","title":"BrowserModel","text":"<p>The class you will be working on.</p>"},{"location":"21%20Browsing/#-fields-","title":"---Fields---","text":"<p>By default, consider all fields private unless specified otherwise</p>"},{"location":"21%20Browsing/#view-browserview","title":"view <code>BrowserView</code>","text":"<p>Hold the BrowserView</p> <p>Info</p> <p>To update a BrowserView's page you need to use the method <code>BrowserView.update(page)</code></p>"},{"location":"21%20Browsing/#backstk-stackinteger","title":"backStk <code>Stack&lt;Integer&gt;</code>","text":"<p>Holds the Stack for pages that you've been to</p>"},{"location":"21%20Browsing/#forwardstk-stackinteger","title":"forwardStk <code>Stack&lt;Integer&gt;</code>","text":"<p>Holds the Stack for pages to go after you go bacK</p>"},{"location":"21%20Browsing/#topline-int","title":"topLine <code>int</code>","text":"<p>The current page you will be on</p>"},{"location":"21%20Browsing/#-methodsfunctions-","title":"---Methods/Functions---","text":"<p>By default, consider all Methods public unless specified otherwise</p>"},{"location":"21%20Browsing/#browsermodelbrowserview-view-constructor","title":"BrowserModel(<code>BrowserView view</code>) : <code>constructor</code>","text":"<p>Initialize all the fields </p>"},{"location":"21%20Browsing/#home-void","title":"Home() : <code>void</code>","text":"<p>Clears the stacks and goes to the home page (0)</p>"},{"location":"21%20Browsing/#back-void","title":"back() : <code>void</code>","text":"<p>Updates <code>view</code> to the previous line from the back stack </p> <p>Info</p> <p>remember to update <code>forwardStk</code> and <code>topLine</code>. Also remember to check if <code>backStk</code> is empty</p>"},{"location":"21%20Browsing/#forward-void","title":"forward() : <code>void</code>","text":"<p>Similar to <code>back()</code> but moves forward instead.</p>"},{"location":"21%20Browsing/#followlinkint-n-void","title":"followLink(<code>int n</code>) : <code>void</code>","text":"<p>Is called when the Blue text is clicked.</p> <p></p> <p><code>n</code> will be the blue line that is clicked and you will make <code>view</code> display the n-th line.</p> <p>Info</p> <p>remember to store the current line in <code>backStk</code> and update <code>view</code></p>"},{"location":"21%20Browsing/#hasback-boolean","title":"hasBack() : <code>boolean</code>","text":"<p>if there is values in <code>backStk</code></p>"},{"location":"21%20Browsing/#hasforward-boolean","title":"hasForward() : <code>boolean</code>","text":"<p>if there is values in <code>forwardStk</code></p>"},{"location":"31.3%20RPN/","title":"31.3 RPN","text":"<p>RPN (Reverse Polish Notation)</p> <p>Difficulty: unknown </p>"},{"location":"31.3%20RPN/#instructions","title":"Instructions","text":""},{"location":"31.3%20RPN/#background","title":"Background","text":"<ol> <li> <p>Most calculators use infix notation, in which the operator is typed between the operands. Everyone is familiar with solving infix math expressions, such as 2 + 3, or 9 - 5.</p> </li> <li> <p>There are two other types of notation: prefix and postfix. In prefix, the operator comes before (\"pre\") the operands, such as in these expressions: + 2 3 or - 9 5.</p> </li> <li> <p>Postfix expressions are used on some specialized calculators called RPN calculators, so complex math expressions can be entered without the need for parentheses. Postfix math is also called reverse polish notation (RPN). RPN is defined as a mathematical expression in which the numbers precede the operation (i.e., 2 + 2 is 2 2 + in RPN, or 10 - 3 * 4 is 10 3 4 * - in RPN). Postfix statements look like 2 3 + or 9 5 -.</p> </li> <li> <p>Here is a comparison of infix versus postfix math expressions:</p> <p>infix</p> <p>5 + ((7 + 9) * 2)</p> <p>postfix</p> <p>5 7 9 + 2 * +</p> <p>A postfix expression is evaluated as follows:</p> <ul> <li>if a value is entered, it is placed on the stack</li> <li>if an operation is entered (+, -, *, /), the stack is popped twice and the operation is applied to those two numbers. The resulting answer is placed back on the stack.</li> </ul> <p>The expression 5 7 9 + 2 * + is solved in this order:</p> <p>5 16 2 * + 5 32 + 37</p> </li> <li> <p>Notice that postfix expressions are simply solved by moving from left to right and parentheses are not needed.</p> <p>The following special cases must be addressed:</p> <pre><code>if the problem to be solved is 7 - 5 (infix), the problem is entered on an RPN calculator in the following order.\n\n7 (enter)\n5 (enter)\n-\n\nThis causes the stack to be popped twice and the correct expression to be evaluated is:\n\n7 5 -\n\nThe answer is 2.\n\nA similar ordering issue surrounds the (/) operator:\n\nIf the problem to be solved is 9 / 2 (infix), the problem is entered on an RPN calculator as:\n\n9\n2\n/\n\nThe answer is 4.\n</code></pre> </li> </ol>"},{"location":"31.3%20RPN/#assignment","title":"Assignment","text":"<ol> <li> <p>Write a program to implement a simple RPN calculator that processes only the following type of input:</p> <pre><code>single-digit integers\nthe four integer math operations: +, -, *, /    \n</code></pre> </li> <li> <p>The user will type in single character input until \u2018Q\u2019 or \u2018q\u2019 is entered. As described above, if a digit is entered, the number is placed on the stack. If an operation is entered, pop two values off the stack, do the math, then return the answer back onto the stack. As keyboard input is entered, the program should keep track of all keystrokes entered to be replayed after \u2018Q\u2019 or \u2018q\u2019 is entered.</p> </li> <li> <p>When \u2018Q\u2019 or \u2018q\u2019 is entered, the program will print out the entire problem (i.e. the sequence of characters that had been input) and the answer. It is suggested that a queue and a stack should be used in this lab.</p> </li> <li> <p>You must create a modular solution and have at least 2 helper methods beyond the <code>calculate()</code> method that you see in the starter code.</p> </li> </ol>"},{"location":"31.3%20RPN/#examples","title":"Examples","text":"<p>Here are 5 examples of the input and output:</p> Example 1 <pre><code>9\n5\n-\nq\n9 5 - = 4 \u2003\u2003 // Note: This is the output that should be printed out\n</code></pre> Example 2 <pre><code>7\n3\n*\n6\n/\nQ \u2003\u2003\u2003\u2003\u2003\u2003 // Note: either a 'q' or 'Q'...\n7 3 * 6 / = 3\n</code></pre> Example 3 <pre><code>8\n4\n7\n+\n-\nq\n8 4 7 + - = -3\n</code></pre> Example 4 <pre><code>7\n3\n9\n4\n5\n*\n+\n-\n-\nq\n7 3 9 4 5 * + - - = 33\n</code></pre> Example 5 <pre><code>8\n4\n3\n*\n*\n6\n4\n2\n-\n+\n+\nQ\n8 4 3 * * 6 4 2 - + + = 104\n</code></pre>"},{"location":"9999FeedBack/","title":"Suggestions/Feedback","text":"<p>no spam thanks</p>"}]}